//
// Generated by LLVM NVPTX Back-End
//

.version 7.0
.target sm_80
.address_size 64

	// .globl	scale_arrays            // -- Begin function scale_arrays
                                        // @scale_arrays
.visible .func scale_arrays(
	.param .b64 scale_arrays_param_0,
	.param .b32 scale_arrays_param_1
)
{
	.local .align 8 .b8 	__local_depot0[16];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<2>;
	.reg .b32 	%r<7>;
	.reg .f32 	%f<3>;
	.reg .b64 	%rd<6>;
	.reg .f64 	%fd<3>;

// %bb.0:
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r1, [scale_arrays_param_1];
	ld.param.u64 	%rd1, [scale_arrays_param_0];
	st.u64 	[%SP+0], %rd1;
	st.u32 	[%SP+8], %r1;
	mov.b32 	%r2, 0;
	st.u32 	[%SP+12], %r2;
	bra.uni 	$L__BB0_1;
$L__BB0_1:                              // =>This Inner Loop Header: Depth=1
	ld.u32 	%r3, [%SP+12];
	ld.u32 	%r4, [%SP+8];
	setp.ge.s32 	%p1, %r3, %r4;
	@%p1 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_2;
$L__BB0_2:                              //   in Loop: Header=BB0_1 Depth=1
	ld.u64 	%rd2, [%SP+0];
	ld.s32 	%rd3, [%SP+12];
	shl.b64 	%rd4, %rd3, 2;
	add.s64 	%rd5, %rd2, %rd4;
	ld.f32 	%f1, [%rd5];
	cvt.f64.f32 	%fd1, %f1;
	mul.rn.f64 	%fd2, %fd1, 0d4005AE147AE147AE;
	cvt.rn.f32.f64 	%f2, %fd2;
	st.f32 	[%rd5], %f2;
	bra.uni 	$L__BB0_3;
$L__BB0_3:                              //   in Loop: Header=BB0_1 Depth=1
	ld.u32 	%r5, [%SP+12];
	add.s32 	%r6, %r5, 1;
	st.u32 	[%SP+12], %r6;
	bra.uni 	$L__BB0_1;
$L__BB0_4:
	ret;
                                        // -- End function
}
